{"version":3,"sources":["utils/validators/validators.js","components/common/FormsControls/FormControls.jsx","components/common/FormsControls/FormControls.module.css","components/Login/Login.module.css","components/Login/Login.tsx"],"names":["required","value","maxLengthCreator","maxLength","length","FormControl","Control","input","meta","touched","error","props","hasError","className","styles","formGroup","formControl","formGroupErrors","module","exports","Input","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","useSelector","state","auth","useDispatch","formLoginWrapper","formLogin","onSubmit","placeholder","name","type","component","validate","src","alt","Login","isAuth","dispatch","to","formData","login"],"mappings":"sHAAA,oEAAO,IAAMA,EAAW,SAACC,GACrB,IAAIA,EAEJ,MAAO,sBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,KAAIA,GAASA,EAAMG,QAAUD,GAE7B,MAAM,2BAAN,OAAkCA,EAAlC,e,0ICNSE,EAAc,SAAAC,GAAO,OAAI,YAAgD,IAA9CC,EAA6C,EAA7CA,MAA6C,IAAtCC,KAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,iBAC3EC,EAAWH,GAAWC,EAE5B,OACI,sBAAKG,UAAS,UAAKC,IAAOC,UAAZ,YAA0BH,EAAWE,IAAOJ,MAAQ,IAAlE,UACI,cAACJ,EAAD,yBAASO,UAAWC,IAAOE,aAAiBT,GAAWI,IAEnDC,EAEI,qBAAKC,UAAWC,IAAOG,gBAAvB,SACI,4BAAIP,MAEN,S,oBCdtBQ,EAAOC,QAAU,CAAC,UAAY,gCAAgC,gBAAkB,sCAAsC,MAAQ,4BAA4B,YAAc,oC,oBCAxKD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,gBAAkB,iC,iCCDzE,oGAWMC,EAAQf,YAAY,SAgEpBgB,EAAiBC,YAA+B,CAAEC,KAAM,SAAvCD,EAtDnB,SAAC,GAA2B,IAA1BZ,EAAyB,EAAzBA,MAAOc,EAAkB,EAAlBA,aAEHC,EAAaC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,cAClDI,cAEjB,OACI,qBAAKhB,UAAWC,IAAOgB,iBAAvB,SACI,uBAAMjB,UAAWC,IAAOiB,UAAWC,SAAUR,EAA7C,UACI,qBAAKX,UAAU,GAAf,SACI,cAAC,IAAD,CAAOoB,YAAa,QACbC,KAAM,QACNC,KAAM,OACNC,UAAWhB,EACXiB,SAAU,CAACrC,SAEtB,qBAAKa,UAAU,GAAf,SACI,cAAC,IAAD,CAAOoB,YAAa,WACbC,KAAM,WACNC,KAAM,WACNC,UAAWhB,EACXiB,SAAU,CAACrC,SAEtB,qBAAKa,UAAU,GAAf,SACI,sBAAKA,UAAU,WAAf,UACI,cAAC,IAAD,CAAOqB,KAAM,aACNC,KAAM,WACNC,UAAWhB,IAHtB,oBAQAK,GACA,qCACI,qBAAKa,IAAKb,EAAYc,IAAI,KAC1B,qBAAK1B,UAAU,GAAf,SACI,cAAC,IAAD,CAAOoB,YAAa,OACbC,KAAM,UACNC,KAAM,WACNC,UAAWhB,EACXiB,SAAU,CAACrC,YAK5BU,GAAS,qBAAKG,UAAWC,IAAOG,gBAAvB,SAAyCP,IAEpD,qBAAKG,UAAU,GAAf,SACI,wBAAQA,UAAU,qBAAlB,6BAyBL2B,UAhBS,SAAC7B,GAErB,IAAM8B,EAASf,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKa,UACzDC,EAAWb,cAKjB,OAAIY,EAAiB,cAAC,IAAD,CAAUE,GAAI,aAC5B,gCACH,uCACA,cAACtB,EAAD,CAAgBW,SANH,SAACY,GACdF,EAASG,YAAMD","file":"static/js/8.3a14e6e8.chunk.js","sourcesContent":["export const required = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required!\";\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length <= maxLength) return undefined;\r\n\r\n    return `Fields length more then ${maxLength} symbols`;\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\"\r\n\r\nexport const FormControl = Control => ({input, meta: {touched, error}, ...props}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={`${styles.formGroup} ${ hasError ? styles.error : ''}`}>\r\n            <Control className={styles.formControl} {...input} {...props} />\r\n            {\r\n                hasError\r\n                    ?\r\n                    <div className={styles.formGroupErrors}>\r\n                        <p>{error}</p>\r\n                    </div>\r\n                    : ''\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formGroup\":\"FormControls_formGroup__2xi7S\",\"formGroupErrors\":\"FormControls_formGroupErrors__1oEpX\",\"error\":\"FormControls_error__3Nz9m\",\"formControl\":\"FormControls_formControl__ETq1M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLogin\":\"Login_formLogin__1t-xj\",\"formGroupErrors\":\"Login_formGroupErrors__3fvuI\"};","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {FormControl} from \"../common/FormsControls/FormControls\";\r\nimport styles from \"./Login.module.css\";\r\nimport {Redirect} from \"react-router\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport App from \"../../App\";\r\n\r\nconst Input = FormControl(\"input\");\r\n\r\ntype LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n};\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType>> =\r\n    ({error, handleSubmit}) => {\r\n\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className={styles.formLoginWrapper}>\r\n            <form className={styles.formLogin} onSubmit={handleSubmit}>\r\n                <div className=\"\">\r\n                    <Field placeholder={\"Login\"}\r\n                           name={\"email\"}\r\n                           type={\"text\"}\r\n                           component={Input}\r\n                           validate={[required]} />\r\n                </div>\r\n                <div className=\"\">\r\n                    <Field placeholder={\"Password\"}\r\n                           name={\"password\"}\r\n                           type={\"password\"}\r\n                           component={Input}\r\n                           validate={[required]} />\r\n                </div>\r\n                <div className=\"\">\r\n                    <div className=\"checkbox\">\r\n                        <Field name={\"rememberMe\"}\r\n                               type={\"checkbox\"}\r\n                               component={Input} /> remember me\r\n                    </div>\r\n                </div>\r\n\r\n                {\r\n                    captchaUrl &&\r\n                    <>\r\n                        <img src={captchaUrl} alt=\"\"/>\r\n                        <div className=\"\">\r\n                            <Field placeholder={\"Code\"}\r\n                                   name={\"captcha\"}\r\n                                   type={\"password\"}\r\n                                   component={Input}\r\n                                   validate={[required]} />\r\n                        </div>\r\n                    </>\r\n                }\r\n\r\n                { error && <div className={styles.formGroupErrors}>{error}</div> }\r\n\r\n                <div className=\"\">\r\n                    <button className=\"btn-custom__accent\">Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType>({ form: 'login' })(LoginForm);\r\n\r\nconst Login: React.FC = (props) => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: any) => {\r\n        dispatch(login(formData));\r\n    };\r\n    if (isAuth) { return <Redirect to={\"/profile\"} /> }\r\n    return <div>\r\n        <h2>Login</h2>\r\n        <LoginReduxForm onSubmit={onSubmit} />\r\n    </div>;\r\n};\r\n\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}